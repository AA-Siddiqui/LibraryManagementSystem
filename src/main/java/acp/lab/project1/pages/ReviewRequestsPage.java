/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package acp.lab.project1.pages;
import acp.lab.project1.utils.ConnectionManager;
import acp.lab.project1.utils.DefinedColors;
import java.sql.*;
import java.math.BigDecimal;
import java.util.LinkedList;
/**
 *
 * @author addan
 */
class Request {
    public int id;
    public int type;
    public int userId;
    public int recordId;
    public BigDecimal amount;
    public Request(int i, int t, int u, int r, BigDecimal a) {
        id = i;
        type = t;
        userId = u;
        recordId = r;
        amount = a;
    }
}
public class ReviewRequestsPage extends javax.swing.JFrame {
    private LinkedList<Request> reqs;
    /**
     * Creates new form AccountPage
     */
    public ReviewRequestsPage() {
        reqs = new LinkedList<>();
        initComponents();
        postInit();
    }
    
    private void postInit() {
        Connection con = null;
        try {
            con = ConnectionManager.getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        if (con == null) return;
        
        try {
            ResultSet rs = con.createStatement().executeQuery("select RequestId, UserId, RecordId, RequestType, Amount from Request");
            while (rs.next()) {
                Request r = new Request(rs.getInt("RequestId"), rs.getInt("RequestType"), rs.getInt("UserId"), rs.getInt("RecordId"), rs.getBigDecimal("Amount"));
                reqs.add(r);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        updateRequest();
    }
    
    private void updateRequest() {
        if (reqs.size() == 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "No requests to review!", 
                                   "Info", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            AdminManagementPage.main(new String[]{});
            setVisible(false);
            dispose();
            return;
        }
        
        Request cur = reqs.peekFirst();
        
        Connection con = null;
        try {
            con = ConnectionManager.getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        if (con == null) return;
        
        String username = "";
        String bookTitle = "";
        try {
            ResultSet rs = con.createStatement().executeQuery("select Username from UserDetails where UserId = " + cur.userId);
            while (rs.next()) {
                username = rs.getString("Username");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        try {
            ResultSet rs = con.createStatement().executeQuery("select Title from Book where BookId = (select BookId from Record where RecordId = " + cur.recordId + ")");
            while (rs.next()) {
                bookTitle = rs.getString("Title");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        if (cur.type == 1) {
            jLabel3.setText("<html><p style=\'text-align:center\'>" + username + " claims they have paid to upgrade.<br>Approve?</p></html>");
        } else if (cur.type == 2) {
            jLabel3.setText("<html><p style=\'text-align:center\'>" + username + " claims they have returned " + bookTitle + ".<br>Approve?</p></html>");
        } else if (cur.type == 3) {
            jLabel3.setText("<html><p style=\'text-align:center\'>" + username + " claims they have paid $" + cur.amount.toString() + " in fines.<br>Approve?</p></html>");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        denyButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        approveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(DefinedColors.backgroundPrimaryColor);
        jPanel2.setMaximumSize(new java.awt.Dimension(1280, 720));
        jPanel2.setMinimumSize(new java.awt.Dimension(1280, 720));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(DefinedColors.backgroundLightColor);
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(DefinedColors.whiteColor));
        jPanel1.setMaximumSize(new java.awt.Dimension(640, 480));
        jPanel1.setMinimumSize(new java.awt.Dimension(640, 480));
        jPanel1.setPreferredSize(new java.awt.Dimension(640, 480));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Roboto Condensed", 1, 24)); // NOI18N
        jLabel2.setForeground(DefinedColors.whiteColor);
        jLabel2.setText("Review Request");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 85, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jPanel4.setBackground(DefinedColors.backgroundLightColor);
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Roboto Condensed", 1, 24)); // NOI18N
        jLabel3.setForeground(DefinedColors.whiteColor);
        jPanel4.add(jLabel3, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 25, 0);
        jPanel1.add(jPanel4, gridBagConstraints);

        jPanel3.setBackground(DefinedColors.backgroundLightColor);
        jPanel3.setLayout(new java.awt.GridBagLayout());

        denyButton.setBackground(DefinedColors.backgroundSecondaryColor);
        denyButton.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        denyButton.setForeground(DefinedColors.whiteColor);
        denyButton.setText("Deny");
        denyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                denyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 15, 15);
        jPanel3.add(denyButton, gridBagConstraints);

        backButton.setBackground(DefinedColors.backgroundSecondaryColor);
        backButton.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        backButton.setForeground(DefinedColors.whiteColor);
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 15, 15);
        jPanel3.add(backButton, gridBagConstraints);

        approveButton.setBackground(DefinedColors.backgroundSecondaryColor);
        approveButton.setFont(new java.awt.Font("Roboto Condensed", 0, 14)); // NOI18N
        approveButton.setForeground(DefinedColors.whiteColor);
        approveButton.setText("Approve");
        approveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 15, 15);
        jPanel3.add(approveButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(75, 0, 0, 0);
        jPanel1.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(246, 544, 247, 545);
        jPanel2.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void denyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denyButtonActionPerformed
        // TODO add your handling code here:
        removeRequest(0);
    }//GEN-LAST:event_denyButtonActionPerformed
    
    private void removeRequest(int approval) {
        Request cur = reqs.peekFirst();
        
        Connection con = null;
        try {
            con = ConnectionManager.getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        if (con == null) return;
        
        try {
            int inserted = con.createStatement().executeUpdate("insert into Notifications(UserId, RequestType, Approval) values(" + cur.userId + ", " + cur.type + ", " + approval + ")");
            System.out.println(Integer.valueOf(inserted).toString() + " rows updated!");
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        try {
            int inserted = con.createStatement().executeUpdate("delete from Request where RequestId = " + cur.id);
            System.out.println(Integer.valueOf(inserted).toString() + " rows deleted!");
        } catch (SQLException e) {
            e.printStackTrace();
            return;
        }
        
        reqs.pollFirst();
        updateRequest();
    }
    
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        AdminManagementPage.main(new String[]{});
        setVisible(false);
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void approveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveButtonActionPerformed
        // TODO add your handling code here:
        Request cur = reqs.peekFirst();
        
        Connection con = null;
        try {
            con = ConnectionManager.getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        if (con == null) return;
        
        int ut = -1;
        try {
            ResultSet rs = con.createStatement().executeQuery("select UserType from UserDetails where UserId = " + cur.userId);
            while (rs.next()) {
                ut = rs.getInt("UserType");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        if (cur.type == 1) {
            try {
                int inserted = con.createStatement().executeUpdate("update UserDetails set UserType = 2 where UserId = " + cur.userId);
                System.out.println(Integer.valueOf(inserted).toString() + " rows updated!");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else if (cur.type == 2) {
            try {
                int inserted = con.createStatement().executeUpdate("update Record set ReturnDate = GETDATE(), Fine = DATEDIFF(day, BorrowDate, GETDATE()) - " + (ut == 1 ? 3 : 5) + " where RecordId = " + cur.recordId);
                System.out.println(Integer.valueOf(inserted).toString() + " rows updated!");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else if (cur.type == 3) {
            LinkedList<Integer> rid = new LinkedList<>();
            LinkedList<BigDecimal> f = new LinkedList<>();
            try {
                ResultSet rs = con.createStatement().executeQuery("select RecordId, Fine from Record where Fine > 0 and UserId = " + cur.userId);
                while (rs.next()) {
                    rid.add(rs.getInt("RecordId"));
                    f.add(rs.getBigDecimal("Fine"));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            for (int i = 0; i < rid.size(); i++) {
                try {
                    // fine[i] is greater than remaining payment
                    if (f.get(i).compareTo(cur.amount) == 1) {
                        con.createStatement().executeUpdate("update Record set Fine = Fine - " + cur.amount.toString() + " where RecordId = " + rid.get(i));
                        break;
                    }
                    if (f.get(i).compareTo(cur.amount) < 1) {
                        con.createStatement().executeUpdate("update Record set Fine = 0 where RecordId = " + rid.get(i));
                        cur.amount.subtract(f.get(i));
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        
        removeRequest(1);
    }//GEN-LAST:event_approveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReviewRequestsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReviewRequestsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReviewRequestsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReviewRequestsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReviewRequestsPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton denyButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}
